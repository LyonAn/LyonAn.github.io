[{"title":"基于 Hexo + GitHub Pages 搭建个人博客","date":"2017-11-29T16:06:48.000Z","path":"2017/11/30/基于-Hexo-GitHub-Pages-搭建个人博客/","text":"前言之前一直想弄个自己的个人博客，记录自己的学习历程。看了很多网站，像 CSDN 、博客园 、简书也都有博客专栏，总感觉不够个性化，但自己撸一个网站苦于前端技术太渣，耗时好力还不讨喜。于是折中选择使用 Hexo + GitHub 来搭建这个个人博客，也顺便熟悉一下 git 的基本知识。 什么是 Hexo Hexo 是一款基于 Node.js 的静态博客框架，可以生成静态网页托管在 GitHub 和 Heroku 上。Hexo 使用 Markdown （或其他渲染引擎）解析文章，在几秒内即可利用靓丽的主题生成静态网页（简直是前端小白福音啊） Hexo 官网 如何使用 Hexo前面说了 Hexo 是基于 Node.js 的，所以需要系统中安装 Node.js。因为博客是托管在 GitHub 上的，所以还要安装 git 安装 Node.js下载 Node.js安装教程 安装 git （按照默认设置的安装就好）下载 git对于 git 或者 不了解 GitHub 的同学点击 stormzhang的博客，本文不扩展这部分内容了 安装 Hexo新建一个文件夹命名为 Hexo，在该文件夹下右键鼠标选择 Git Bash Here依次输入一下命令（安装无进度提示，过程需要等待） 1234567$ cd d:/hexo$ npm install hexo-cli -g$ hexo init blog # 创建 blog 文件夹$ cd blog$ npm install$ hexo g$ hexo s 完成以上操作，显示本地的 web 服务器已经启动了，在浏览器中输入 localhost:4000 即可看到默认生成的博客页面了（已经有一篇默认的博文）常用命令：12345$ hexo new &quot;Name&quot; # 创建一篇 blog$ hexo generate # （简写 hexo g） 生成网站$ hexo server # （简写 hexo s） 启动本地服务器$ hexo deploy # （简写 hexo d）$ hexo clean # 清除缓存文件 （db.json） 和已经生成的静态文件（public文件夹） 更多 Hexo 命令 如何写博客通过命令创建一篇博客后，打开 blog 文件夹，该篇博文在 source 文件夹的 _posts 子文件夹下，使用 markdown 编辑器（自行搜索下载）打开该文件即可编辑内容。删除该文件并重新生成网页后该博客就可被删除。了解更多 Markdown 相关内容 如何修改页面上的内容所有可供修改的内容均在 _config.yml 配置文件当中，自行修改对应内容的参数和数据即可。如果你使用了 GitHub 上的不同主题，则需要修改对应主题文件包下的 _config.yml 配置文件 部署到 GitHub Pages不了解 GitHub 的同学在前面安装 git 的时候应该已经初步了解并注册了 GitHub 账号了吧。那么就进行以下步骤： 部署准备(授权本机向 GitHub 提交代码)向 GitHub 提交代码是需要授权的，不能随意提交，GitHub 上一般是基于 SSH 授权的。SSH 是一种网络协议，用于计算机之间的加密登录。Linux 和 Mac 是默认安装了 SSH，Windows系统在安装了 git 之后也是自带 SSH 的。（在 Git Bash 里输入 ssh 出现以下提示说明本机已安装） 继续输入命令 ssh-keygen -t rsa（指定 rsa 算法生成密钥，接着连续三个回车）系统就会生成 id_rsa 和 id_rsa.pub 两个文件（Windows 在c:/Documents and Settings/username/.ssh 下）。前者为本机密钥，后者为公钥，两者配对才能授权成功。 记事本打开 id_rsa.pub 文件，复制内容 在 GitHub 上添加 SSH key 公钥, 点击你的 GitHub 头像，选择 Settings，添加 SSH在红色框内粘贴复制的内容，title可不填 验证是否添加成功 在 GitHub 上创建一个新的 repository PS：repository命名以.github.io结尾时，会自动开启 GitHub Pages 如下图（在仓库的Settings 选项中） 将本地 Hexo 页面部署到 GitHub Pages 步骤一：修改配置文件，找到 _config.yml 文件中的 deploy 部分（用 sublime 等编辑器打开，保证保存的编码为 UTF-8 ）作如下修改（注意冒号后面要有空格） 1234deploy: type: git repo: git@github.com:username/username.github.io.git branch: master 步骤二：安装用于发布的扩展插件（在 blog 目录下） 1$ npm install hexo-deployer-git --save 步骤三：执行命令 $ hexo d 部署原理： 之前步骤中在 GitHub 上创建的那个 repo（username.github.io）一个最大的特点就是其 master 中的 html 静态文件，可以通过链接http://username.github.io来直接访问。 hexo g 会生成一个静态网站（第一次会生成一个 public 目录），这个静态文件可以直接访问。 需要将 hexo 生成的静态网站，提交 (git commit) 到 GitHub 上。 接下来访问你的博客网址，会发现已经变成了之前 Hexo 生成的页面了。简单的博客网站已经搭建完成了，当然，完成以上步骤只是使用了原始 Hexo 框架提供的主题。GitHub上还有很多基于 Hexo的酷炫主题可供修改博客页面。 Hexo 主题配置以我当前主题（indigo）为例。 在 GitHub 上搜索 hexo theme，找到 indigo 在 blog 文件夹下执行以下命令将项目 clone 到本地，这时候 themes 文件夹下会出现该项目文件夹 1git clone git@github.com:yscoder/hexo-theme-indigo.git themes/indigo PS：由于该主题对应环境有要求（node 6.0+，Hexo 3.0+），并且需要一些环境依赖，安装相应插件。具体参考该主题提供的文档 打开 blog 文件夹中的 _config.yml 配置文件，找到 theme 选项，修改为 indigo (项目文件名) 修改主题文件的_config.yml 配置文件，具体修改同样参考文档 重新生成 Hexo 网页并部署到 GitHub Pages上。 至此，博客网站已搭建完成，更多内容修改和功能配置参考主题文档即可。本人非常喜欢这个主题，非常感谢主题开发者：https://github.com/yscoder ，必须给 star 呀。","tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/tags/Hexo/"},{"name":"GitHub","slug":"GitHub","permalink":"http://yoursite.com/tags/GitHub/"}]}]