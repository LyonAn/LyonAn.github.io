<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LyonAn</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-11-30T16:24:56.408Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>LyonAn</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>基于 Hexo + GitHub Pages 搭建个人博客</title>
    <link href="http://yoursite.com/2017/11/30/%E5%9F%BA%E4%BA%8E-Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2017/11/30/基于-Hexo-GitHub-Pages-搭建个人博客/</id>
    <published>2017-11-29T16:06:48.000Z</published>
    <updated>2017-11-30T16:24:56.408Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前一直想弄个自己的个人博客，记录自己的学习历程。看了很多网站，像 CSDN 、博客园 、简书也都有博客专栏，总感觉不够个性化，但自己撸一个网站苦于前端技术太渣，耗时好力还不讨喜。于是折中选择使用 Hexo + GitHub 来搭建这个个人博客，也顺便熟悉一下 git 的基本知识。</p><hr><h1 id="什么是-Hexo"><a href="#什么是-Hexo" class="headerlink" title="什么是 Hexo"></a>什么是 Hexo</h1><blockquote><p>Hexo 是一款基于 Node.js 的静态博客框架，可以生成静态网页托管在 GitHub 和 Heroku 上。Hexo 使用 Markdown （或其他渲染引擎）解析文章，在几秒内即可利用靓丽的主题生成静态网页（简直是前端小白福音啊）</p></blockquote><p><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo 官网</a></p><hr><h1 id="如何使用-Hexo"><a href="#如何使用-Hexo" class="headerlink" title="如何使用 Hexo"></a>如何使用 Hexo</h1><p>前面说了 Hexo 是基于 Node.js 的，所以需要系统中安装 Node.js。因为博客是托管在 GitHub 上的，所以还要安装 git</p><ol><li><p>安装 Node.js<br><a href="https://nodejs.org/download/" target="_blank" rel="noopener">下载 Node.js</a><br><a href="http://www.runoob.com/nodejs/nodejs-install-setup.html" target="_blank" rel="noopener">安装教程</a></p></li><li><p>安装 git （按照默认设置的安装就好）<br><a href="https://git-scm.com/download/" target="_blank" rel="noopener">下载 git</a><br>对于 git 或者 不了解 GitHub 的同学点击 <a href="http://stormzhang.com/github/2016/05/25/learn-github-from-zero1/" target="_blank" rel="noopener">stormzhang的博客</a>，本文不扩展这部分内容了</p></li><li><p>安装 Hexo<br>新建一个文件夹命名为 Hexo，在该文件夹下右键鼠标选择 Git Bash Here<br>依次输入一下命令（安装无进度提示，过程需要等待）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ cd d:/hexo</span><br><span class="line">$ npm install hexo-cli -g</span><br><span class="line">$ hexo init blog # 创建 blog 文件夹</span><br><span class="line">$ cd blog</span><br><span class="line">$ npm install</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure></li></ol><p>完成以上操作，显示本地的 web 服务器已经启动了，在浏览器中输入 <a href="localhost:4000" target="_blank" rel="noopener">localhost:4000</a> 即可看到默认生成的博客页面了（已经有一篇默认的博文）<br>常用命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new &quot;Name&quot; # 创建一篇 blog</span><br><span class="line">$ hexo generate # （简写 hexo g） 生成网站</span><br><span class="line">$ hexo server # （简写 hexo s） 启动本地服务器</span><br><span class="line">$ hexo deploy # （简写 hexo d）</span><br><span class="line">$ hexo clean # 清除缓存文件 （db.json） 和已经生成的静态文件（public文件夹）</span><br></pre></td></tr></table></figure></p><p><a href="https://hexo.io/zh-cn/docs/commands.html" target="_blank" rel="noopener">更多 Hexo 命令</a></p><hr><h1 id="如何写博客"><a href="#如何写博客" class="headerlink" title="如何写博客"></a>如何写博客</h1><p>通过命令创建一篇博客后，打开 blog 文件夹，该篇博文在 source 文件夹的 <code>_posts</code> 子文件夹下，使用 markdown 编辑器（自行搜索下载）打开该文件即可编辑内容。删除该文件并重新生成网页后该博客就可被删除。<br><a href="https://sspai.com/post/25137" target="_blank" rel="noopener">了解更多 Markdown 相关内容</a></p><hr><h1 id="如何修改页面上的内容"><a href="#如何修改页面上的内容" class="headerlink" title="如何修改页面上的内容"></a>如何修改页面上的内容</h1><p>所有可供修改的内容均在 <code>_config.yml</code> 配置文件当中，自行修改对应内容的参数和数据即可。<br>如果你使用了 GitHub 上的不同主题，则需要修改对应主题文件包下的 <code>_config.yml</code> 配置文件</p><hr><h1 id="部署到-GitHub-Pages"><a href="#部署到-GitHub-Pages" class="headerlink" title="部署到 GitHub Pages"></a>部署到 GitHub Pages</h1><p>不了解 GitHub 的同学在前面安装 git 的时候应该已经初步了解并注册了 GitHub 账号了吧。那么就进行以下步骤：</p><ol><li><p><strong>部署准备(授权本机向 GitHub 提交代码)</strong><br>向 GitHub 提交代码是需要授权的，不能随意提交，GitHub 上一般是基于 SSH 授权的。SSH 是一种网络协议，用于计算机之间的加密登录。<br>Linux 和 Mac 是默认安装了 SSH，Windows系统在安装了 git 之后也是自带 SSH 的。（在 Git Bash 里输入 ssh 出现以下提示说明本机已安装）</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/ssh.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li>继续输入命令 <code>ssh-keygen -t rsa</code>（指定 rsa 算法生成密钥，接着连续三个回车）系统就会生成 id_rsa 和 id_rsa.pub 两个文件（Windows 在c:/Documents and Settings/username/.ssh 下）。前者为本机密钥，后者为公钥，两者配对才能授权成功。</li><li>记事本打开 id_rsa.pub 文件，复制内容</li><li>在 GitHub 上添加 SSH key 公钥, 点击你的 GitHub 头像，选择 Settings，添加 SSH<br><img src="/images/ssh2.png" alt=""><br>在红色框内粘贴复制的内容，title可不填<br><img src="/images/ssh3.png" alt=""></li><li>验证是否添加成功<br><img src="/images/ssh4.png" alt=""></li></ul></li><li><p><strong>在 GitHub 上创建一个新的 repository</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>PS：repository命名以<code>.github.io</code>结尾时，会自动开启 GitHub Pages 如下图（在仓库的Settings 选项中）</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/3.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></li><li><p><strong>将本地 Hexo 页面部署到 GitHub Pages</strong></p><ul><li><p>步骤一：修改配置文件，找到 <code>_config.yml</code> 文件中的 deploy 部分（用 sublime 等编辑器打开，保证保存的编码为 UTF-8 ）作如下修改（注意冒号后面要有空格）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:username/username.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></li><li><p>步骤二：安装用于发布的扩展插件（在 blog 目录下）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li><li><p>步骤三：执行命令 <code>$ hexo d</code></p></li></ul></li></ol><blockquote><p>部署原理：</p><ol><li>之前步骤中在 GitHub 上创建的那个 repo（username.github.io）一个最大的特点就是其 master 中的 html 静态文件，可以通过链接<code>http://username.github.io</code>来直接访问。</li><li>hexo g 会生成一个静态网站（第一次会生成一个 public 目录），这个静态文件可以直接访问。</li><li>需要将 hexo 生成的静态网站，提交 (git commit) 到 GitHub 上。</li></ol></blockquote><p>接下来访问你的博客网址，会发现已经变成了之前 Hexo 生成的页面了。<br>简单的博客网站已经搭建完成了，当然，完成以上步骤只是使用了原始 Hexo 框架提供的主题。GitHub上还有很多基于 Hexo的酷炫主题可供修改博客页面。</p><h1 id="Hexo-主题配置"><a href="#Hexo-主题配置" class="headerlink" title="Hexo 主题配置"></a>Hexo 主题配置</h1><p>以我当前主题（indigo）为例。</p><ol><li><p>在 GitHub 上搜索 hexo theme，找到 indigo</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/indigo.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></li><li><p>在 blog 文件夹下执行以下命令将项目 clone 到本地，这时候 themes 文件夹下会出现该项目文件夹</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:yscoder/hexo-theme-indigo.git themes/indigo</span><br></pre></td></tr></table></figure><p>PS：由于该主题对应环境有要求（node 6.0+，Hexo 3.0+），并且需要一些环境依赖，安装相应插件。具体参考该主题提供的<a href="https://github.com/yscoder/hexo-theme-indigo/wiki/%E5%AE%89%E8%A3%85" target="_blank" rel="noopener">文档</a></p></li><li>打开 blog 文件夹中的 <code>_config.yml</code> 配置文件，找到 theme 选项，修改为 indigo (项目文件名)</li><li>修改主题文件的<code>_config.yml</code> 配置文件，具体修改同样参考<a href="https://github.com/yscoder/hexo-theme-indigo/wiki/%E5%AE%89%E8%A3%85" target="_blank" rel="noopener">文档</a></li><li>重新生成 Hexo 网页并部署到 GitHub Pages上。</li></ol><p>至此，博客网站已搭建完成，更多内容修改和功能配置参考主题文档即可。<br>本人非常喜欢这个主题，非常感谢主题开发者：<a href="https://github.com/yscoder" target="_blank" rel="noopener">https://github.com/yscoder</a> ，必须给 star 呀。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;之前一直想弄个自己的个人博客，记录自己的学习历程。看了很多网站，像 CSDN 、博客园 、简书也都有博客专栏，总感觉不够个性化，但自己撸一个
      
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="GitHub" scheme="http://yoursite.com/tags/GitHub/"/>
    
  </entry>
  
</feed>
